# backend/services/order_service.py

from sqlalchemy.orm import Session
from fastapi import HTTPException
from datetime import datetime

from backend.models import order as models
from backend.schemas import order_schema
from backend.services.llm_service import generate_notification


def create_order(db: Session, order: order_schema.OrderCreate):
    """Create a new order in the DB."""
    db_order = models.Order(
        product_type=order.product_type,
        product_name=order.product_name,
        amount=order.amount,
        order_state=order.order_state,
        created_at=datetime.utcnow(),
        last_modified=datetime.utcnow()
    )
    db.add(db_order)
    db.commit()
    db.refresh(db_order)
    return db_order


def update_order_state(db: Session, order_id: str, new_state: str):
    db_order = db.query(models.Order).filter(models.Order.id == order_id).first()

    if not db_order:
        raise HTTPException(status_code=404, detail="Order not found")

    db_order.order_state = new_state
    db_order.last_modified = datetime.utcnow()
    db.commit()
    db.refresh(db_order)

    # Trigger AI email if Despachado
    if new_state == "Despachado":
        message = generate_notification(db_order)
        print("\nðŸ“§ Email draft generated by AI:\n", message, "\n")

    return db_order


def get_orders(db: Session):
    """Retrieve all orders from the DB."""
    return db.query(models.Order).all()
